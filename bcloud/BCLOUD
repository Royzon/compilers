#edit-mode: -*- python -*-
#coding:gbk

# 指定工作空间目录, BCLOUD文件所在目录的相对路径
WORKROOT("../../../") 

# 指定操作系统平台, 默认是centos4u3, 还支持centos6u3, v2
PLATFORM("centos4u3")

# 指定gcc版本, 支持gcc和gcc482：如果指定gcc, 在centos4u3下是gcc345, 在centos6u3下是gcc446, 在v2下是gcc482
# COMPILER指定主模块和依赖模块都使用gcc482编译
COMPILER("gcc482")

# 指定预处理参数
CPPFLAGS(r"-D_GNU_SOURCE -D__STDC_LIMIT_MACROS")
CPPFLAGS(r"-DVERSION=\"%s\"" % REPO_REVISION())

# 指定C文件的编译参数
#CFLAGS("-g -pipe -W -Wall -fPIC")

# 指定C++文件的编译参数
CXXFLAGS("-g -pipe -W -Wall -fPIC -std=c++11")

# 增加头文件搜索路径
INCPATHS("$WORK_ROOT")
INCPATHS("util")

# 增加连接的静态库文件
# 默认连接所有依赖模块的静态库, 无需再次指定
# 连接动态库文件也是用LIBS标签指定
LIBS("\$OUT/lib/libutil.a")

# 指定连接参数, 系统动态库可以作为连接参数指定
LDFLAGS("-lpthread -lcrypto -lrt")

# 引入依赖模块
CONFIGS("baidu/bcloud-demo/hello-svn@stable")
CONFIGS("baidu/bcloud-demo/hello-svn@hello-svn_1-0-1-1_PD_BL@git_tag")
CONFIGS("thirdsrc/gtest@gtest_1-7-0-100_PD_BL")

# 发布头文件, 如果该模块被其他模块依赖使用, 要求头文件必须发布
HEADERS("util/*.h", "$INC")

# 生成静态库, Sources 表示生成静态库所使用的源文件
StaticLibrary("util", Sources(GLOB("./util/common.cpp")))

# 生成exe文件, Sources 表示生成执行文件所使用的源文件
Application("hello-git", Sources(GLOB("*.cpp")))

# 生成单测文件, Sources 表示生成单测时所使用的源文件, UTOnServer(True)表示编译完成后在云端运行UT
UTApplication("common_test", Sources("util/common_test.cpp"), UTOnServer(True))

# 将子目录纳入到编译中, 子目录必须包含BCLOUD文件, 原理同CMake相同
Directory("child")
